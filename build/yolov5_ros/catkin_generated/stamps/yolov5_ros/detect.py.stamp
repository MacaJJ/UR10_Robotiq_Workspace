#!/usr/bin/env python3

import rospy
import cv2
import torch
import torch.backends.cudnn as cudnn
import numpy as np
from cv_bridge import CvBridge
from pathlib import Path
import os
import sys
from rostopic import get_topic_type

import sensor_msgs.point_cloud2 as pc2
from sensor_msgs.msg import Image, CompressedImage, CameraInfo, PointCloud2
from detection_msgs.msg import Detection2DArray, Detection2D
from geometry_msgs.msg import Pose
from tf.transformations import quaternion_from_matrix, quaternion_from_euler, quaternion_multiply, quaternion_about_axis, rotation_matrix

from math import pi
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# add yolov5 submodule to path
FILE = Path(__file__).resolve()
ROOT = FILE.parents[0] / "yolov5"
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative path

# import from yolov5 submodules
from models.common import DetectMultiBackend
from utils.general import (
    check_img_size,
    check_requirements,
    non_max_suppression,
    scale_coords
)
from utils.plots import Annotator, colors
from utils.torch_utils import select_device
from utils.augmentations import letterbox


@torch.no_grad()
class Yolov5Detector:
    def __init__(self):
        self.conf_thres = rospy.get_param("~confidence_threshold")
        self.iou_thres = rospy.get_param("~iou_threshold")
        self.agnostic_nms = rospy.get_param("~agnostic_nms")
        self.max_det = rospy.get_param("~maximum_detections")
        self.classes = rospy.get_param("~classes", None)
        self.line_thickness = rospy.get_param("~line_thickness")
        self.view_image = rospy.get_param("~view_image")
        # Initialize weights 
        weights = rospy.get_param("~weights")
        # Initialize model
        self.device = select_device(str(rospy.get_param("~device","")))
        self.model = DetectMultiBackend(weights, device=self.device, dnn=rospy.get_param("~dnn"), data=rospy.get_param("~data"))
        self.stride, self.names, self.pt, self.jit, self.onnx, self.engine = (
            self.model.stride,
            self.model.names,
            self.model.pt,
            self.model.jit,
            self.model.onnx,
            self.model.engine,
        )

        # Setting inference size
        self.img_size = [rospy.get_param("~inference_size_w", 640), rospy.get_param("~inference_size_h",480)]
        self.img_size = check_img_size(self.img_size, s=self.stride)

        # Half
        self.half = rospy.get_param("~half", False)
        self.half &= (
            self.pt or self.jit or self.onnx or self.engine
        ) and self.device.type != "cpu"  # FP16 supported on limited backends with CUDA
        if self.pt or self.jit:
            self.model.model.half() if self.half else self.model.model.float()
        bs = 1  # batch_size
        cudnn.benchmark = True  # set True to speed up constant image size inference
        self.model.warmup()  # warmup        
        
        # Initialize CV_Bridge
        self.bridge = CvBridge()

        # Subscriber for the depth image
        self.depth_sub = rospy.Subscriber('/myur10/camera1/depth/image_raw', Image, self.depth_callback)

        # Subscriber for depth camera's intrinsic parameters
        camera_info = rospy.wait_for_message('/myur10/camera1/depth/camera_info', CameraInfo)
        self.fx = camera_info.K[0]
        self.fy = camera_info.K[4]
        self.pp_cx = camera_info.K[2]
        self.pp_cy = camera_info.K[5]

        # Subscriber for point cloud generated by depth camera
        self.point_cloud_sub = rospy.Subscriber('/myur10/camera1/depth/points', PointCloud2, self.point_cloud_callback)

        # Initialize subscriber to Image/CompressedImage topic
        input_image_type, input_image_topic, _ = get_topic_type(rospy.get_param("~input_image_topic"), blocking = True)
        self.compressed_input = input_image_type == "sensor_msgs/CompressedImage"

        if self.compressed_input:
            self.image_sub = rospy.Subscriber(
                input_image_topic, CompressedImage, self.callback, queue_size=1
            )
        else:
            self.image_sub = rospy.Subscriber(
                input_image_topic, Image, self.callback, queue_size=1
            )

        # Initialize prediction publisher
        # self.pred_pub = rospy.Publisher(
        #     rospy.get_param("~output_topic"), BoundingBoxes, queue_size=10
        # )

        # Publishing Detection2DArray
        self.pred_pub = rospy.Publisher(
            rospy.get_param("~output_topic"), Detection2DArray, queue_size=10
        )

        # Initialize image publisher
        self.publish_image = rospy.get_param("~publish_image")
        if self.publish_image:
            self.image_pub = rospy.Publisher(
                rospy.get_param("~output_image_topic"), Image, queue_size=10
            )
        

    def callback(self, data):
        """adapted from yolov5/detect.py"""
        # print(data.header)
        if self.compressed_input:
            im = self.bridge.compressed_imgmsg_to_cv2(data, desired_encoding="bgr8")
        else:
            im = self.bridge.imgmsg_to_cv2(data, desired_encoding="bgr8")
        
        im, im0 = self.preprocess(im)
        # print(im.shape)
        # print(img0.shape)
        # print(img.shape)

        # Run inference
        im = torch.from_numpy(im).to(self.device) 
        im = im.half() if self.half else im.float()
        im /= 255
        if len(im.shape) == 3:
            im = im[None]

        pred = self.model(im, augment=False, visualize=False)
        pred = non_max_suppression(
            pred, self.conf_thres, self.iou_thres, self.classes, self.agnostic_nms, max_det=self.max_det
        )

        ### To-do move pred to CPU and fill BoundingBox messages
        
        # Process predictions 
        det = pred[0].cpu().numpy()

        # bounding_boxes = BoundingBoxes()
        # bounding_boxes.header = data.header
        # bounding_boxes.image_header = data.header

        detection_array = Detection2DArray()
        detection_array.header.stamp = rospy.Time.now()
        detection_array.header.frame_id = "camera_depth_frame"
        
        annotator = Annotator(im0, line_width=self.line_thickness, example=str(self.names))
        if len(det):
            # Rescale boxes from img_size to im0 size
            det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()

            # Write results
            for *xyxy, conf, cls in reversed(det):
                # bounding_box = BoundingBox()
                # c = int(cls)
                # # Fill in bounding box message
                # bounding_box.Class = self.names[c]
                # bounding_box.probability = conf 
                # bounding_box.xmin = int(xyxy[0])
                # bounding_box.ymin = int(xyxy[1])
                # bounding_box.xmax = int(xyxy[2])
                # bounding_box.ymax = int(xyxy[3])

                # bounding_boxes.bounding_boxes.append(bounding_box)

                detected_obj = Detection2D()
                detected_obj.header.stamp = rospy.Time.now()
                detected_obj.header.frame_id = "camera_depth_frame"

                xmin = xyxy[0]
                ymin = xyxy[1]
                xmax = xyxy[2]
                ymax = xyxy[3]

                cx = float((xmin + xmax)/2)
                cy = float((ymin + ymax)/2)

                detected_obj.bbox.center.x = cx
                detected_obj.bbox.center.y = cy
                detected_obj.bbox.center.theta = 0

                detected_obj.bbox.size_x =  float((xmax-xmin)/2)
                detected_obj.bbox.size_y = float((ymax-ymin)/2)

                depth = self.depth_image[int(cy), int(cx)]

                x_meters = (cx - self.pp_cx) * depth / self.fx
                y_meters = (cy - self.pp_cy) * depth / self.fy
                z_meters = depth

                c = int(cls)
                detected_obj.results.Class = self.names[c]
                detected_obj.results.score = float(conf)

                obj_pose = Pose()

                obj_pose.position.x = x_meters
                obj_pose.position.y = y_meters
                obj_pose.position.z = z_meters

                xmin_meters = (xmin - self.pp_cx) * depth / self.fx
                xmax_meters = (xmax - self.pp_cx) * depth / self.fx
                ymin_meters = (ymin - self.pp_cy) * depth / self.fy
                ymax_meters = (ymax - self.pp_cy) * depth / self.fy

                #Segment the object from the background using the bounding box found by YOLOv5

                object_indices = np.where((self.point_cloud[:,0] > xmin_meters) & (self.point_cloud[:,0] < xmax_meters) & (self.point_cloud[:,1] > ymin_meters) & (self.point_cloud[:,1] < ymax_meters))[0]
                object_points = self.point_cloud[object_indices]

                scaler = StandardScaler()
                object_points = scaler.fit_transform(object_points)

                pca = PCA(n_components = 3)
                pca.fit(object_points)

                eigen_vectors = pca.components_
                eigen_values = pca.explained_variance_

                orientation = eigen_vectors[:, np.argmax(eigen_values)]

                angle = np.arctan2(orientation[1], orientation[0])

                rot_matrix_3x3 = rotation_matrix(angle, [0, 0, 1])[:3,:3]

                rot_matrix_4x4 = np.eye(4)
                rot_matrix_4x4[:3, :3] = rot_matrix_3x3

                orientation_quaternion = quaternion_from_matrix(rot_matrix_4x4)

                # mean_point = np.mean(object_points, axis=0)
                # centered_points = object_points - mean_point
                # cov_matrix = np.cov(centered_points.T)
                # eig_values, eig_vectors = np.linalg.eig(cov_matrix)

                # axis_x = eig_vectors[0][0]
                # axis_y = eig_vectors[0][1]

                # yaw_angle = np.arctan2(axis_y,axis_x)

                #When object is right in front of the camera, this code will be skipped

                print("x:", x_meters)
                print("y:", y_meters)


                # if y_meters < 0 and x_meters > 0.01 or x_meters < -0.01: 
                #     print("Applying offset")
                #     yaw_angle = yaw_angle - pi/2

                # yaw_angle += pi/2 #Offset to set the gripper to be parallel to the object's side

                # if yaw_angle > pi/2:
                #     yaw_angle -= pi
                # elif yaw_angle < -pi/2:
                #     yaw_angle += pi

                # if yaw_angle < 0:
                #     yaw_angle += pi
                # elif yaw_angle > pi:
                #     yaw_angle -= pi


                # orientation_quaternion = quaternion_from_euler(0, 0, yaw_angle)

                # # Estimate the orientation of the object
                # cov_matrix = np.cov(object_points[:,:3].T) # Calculate the covariance matrix of point cloud

                # eig_values, eig_vectors = np.linalg.eig(cov_matrix) # Calculate the eigenvalues and eigenvectors of the covariance matrix
                # principal_axis_indices = np.argsort(eig_values)[::-1] # Sort the eigenvalues in descending order
                # principal_axes = eig_vectors[:, principal_axis_indices] # Arrange the eigenvectors in the same order
                # orientation_matrix = np.eye(4)
                # orientation_matrix[:3,:3] = principal_axes # Set the rotation matrix to the principal axes
                # orientation_quaternion = quaternion_from_matrix(orientation_matrix) 

                # # Introduce offset when gripper is parallel configuration
                # if detecteced_obj.results.Class = 'sausage'
                #     offset_quaternion = quaternion_from_euler(0,0,0)
                #     final_quaternion = quaternion_multiply(orientation_quaternion,offset_quaternion)

                obj_pose.orientation.x = orientation_quaternion[0]
                obj_pose.orientation.y = orientation_quaternion[1]
                obj_pose.orientation.z = orientation_quaternion[2]
                obj_pose.orientation.w = orientation_quaternion[3]

                detected_obj.results.pose = obj_pose

                detection_array.detections.append(detected_obj)

                # Annotate the image
                if self.publish_image or self.view_image:  # Add bbox to image
                      # integer class
                    label = f"{self.names[c]} {conf:.2f}"
                    annotator.box_label(xyxy, label, color=colors(c, True))   
                    cv2.circle(im0, (int(cx), int(cy)), 4, (0, 255, 0), -1)    

                
                ### POPULATE THE DETECTION MESSAGE HERE

            # Stream results
            im0 = annotator.result()

        # Publish prediction
        # self.pred_pub.publish(bounding_boxes)
        self.pred_pub.publish(detection_array)

        # Publish & visualize images
        if self.view_image:
            cv2.imshow(str(0), im0)
            cv2.waitKey(1)  # 1 millisecond
        if self.publish_image:
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(im0, "bgr8"))
        

    def preprocess(self, img):
        """
        Adapted from yolov5/utils/datasets.py LoadStreams class
        """
        img0 = img.copy()
        img = np.array([letterbox(img, self.img_size, stride=self.stride, auto=self.pt)[0]])
        # Convert
        img = img[..., ::-1].transpose((0, 3, 1, 2))  # BGR to RGB, BHWC to BCHW
        img = np.ascontiguousarray(img)

        return img, img0 

    def depth_callback(self,depth_data):
        
        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_data, "32FC1")
        except CvBridgeError as e:
            print(e)

        self.depth_image = depth_image

    def point_cloud_callback(self,msg):

        self.point_cloud = np.array(list(pc2.read_points(msg)))


if __name__ == "__main__":

    check_requirements(exclude=("tensorboard", "thop"))
    
    rospy.init_node("yolov5", anonymous=True)
    detector = Yolov5Detector()
    
    rospy.spin()
